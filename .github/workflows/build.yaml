---
name: Build

on:
  workflow_call:
    inputs:
      project:
        type: string
        required: true
      tag:
        type: string
        required: true
      repo:
        type: string
        required: true
      cgo:
        type: boolean
        required: true
      packages:
        type: string
        required: true
      containers:
        type: string
        required: true

jobs:
  calculate:
    if: ${{ inputs.tag != '' }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.calculate.outputs.tag }}
    steps:
      - id: calculate
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ inputs.tag }}"
          if [ "$TAG" = "latest" ]; then
            TAG="$(gh release list --repo="${{ inputs.repo }}" --json=tagName,isLatest --jq='.[] | select(.isLatest) | .tagName')"
          fi
          echo "tag=$TAG" | tee -a "$GITHUB_OUTPUT"

  build:
    needs: calculate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJSON(inputs.packages) }}
    steps:
      - name: Free disk space
        if: ${{ inputs.cgo }}
        uses: jlumbroso/free-disk-space@main

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout ${{ inputs.project }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ needs.calculate.outputs.tag }}
          path: src

      - name: Setup go
        if: ${{ !inputs.cgo }}
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Setup goreleaser
        if: ${{ !inputs.cgo }}
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          install-only: true

      - name: Generate
        run: |
          python3 -mpip install pygithub ruamel.yaml
          ./generate.py goreleaser '${{ inputs.project }}' '${{ matrix.package }}'

          if [ -d patches/${{ matrix.package }} ]; then
            cd src
            for i in ../patches/${{ matrix.package }}/*.patch; do
              patch -p1 < $i
            done
          fi

      - name: Build
        if: ${{ !inputs.cgo }}
        run: |
          cd src
          goreleaser release --config=../.goreleaser.yaml --clean --skip=validate

      - name: Build via dockcross
        if: ${{ inputs.cgo }}
        run: |
          docker run ghcr.io/cynix/dockcross-freebsd > build.sh
          chmod +x build.sh
          ./build.sh sh -c 'cd src; goreleaser release --config=../.goreleaser.yaml --clean'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.project }}#${{ matrix.package }}
          path: dist/${{ matrix.package }}-*.tar.gz
          compression-level: 0
          if-no-files-found: error
          retention-days: 1

  release:
    needs: [calculate, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.project }}#*
          path: ./dist/
          merge-multiple: true

      - name: Create release
        run: |
          TAG="${{ inputs.project }}-${{ needs.calculate.outputs.tag }}"
          gh release delete --cleanup-tag --yes $TAG || echo "No existing $TAG"
          gh release create --latest=true --notes=$TAG --title=$TAG $TAG ./dist/*.tar.gz
          for i in $(gh release list --json=tagName --jq="map(select(.tagName | startswith(\"${{ inputs.project }}-\")))[3:] | .[].tagName"); do
            gh release delete --cleanup-tag --yes $i || echo "Could not delete $i"
          done
        env:
          GH_TOKEN: ${{ github.token }}

  container:
    needs: [calculate, release]
    permissions:
      packages: write
    uses: ./.github/workflows/container.yaml
    with:
      project: ${{ inputs.project }}
      tag: ${{ needs.calculate.outputs.tag }}
      containers: ${{ inputs.containers }}
